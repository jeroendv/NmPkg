<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
<!--
TODO:

make a conanInstallation task 
 + runs everytime!
 + installs packages based on configuration, platform and toolset 
   instead of a hardcoded profile name
 + terminates build if and only iff the props files changed!
   (removing need for the Conan.InstallOK file!!)

publish both tasks as a conan tool?

make a conan imports task based on the existance and content of 
conan_imports_manifest.txt


-->

  <Target Name="ConanInstallation" BeforeTargets="PrepareForBuild"
    Condition="Exists('conanfile.txt') And !Exists('Conan.InstallOk')" >
    
    <Message Text="installing conan dependencies" Importance="high" />
    <!-- step 1: install the conan packages for all required profiles-->
    <Exec
      Command="conan install ./ --profile VS11-UnicodeDebug-x86_64" />


    <!-- step 2: mark the successfull installation of all deps with a file -->
    <WriteLinesToFile  
          File="Conan.InstallOk"  
          Lines="This is a temporary file generated by the msbuild process.

!!!Remove this file to force a conan package dependency installation!!!

This file is generated to indicate that 'conan install' has been invoked successfully.
 1) the project dependencies have been installed locally
 2) 'conanbuildinfo_multi.props' and related property sheets have been generated
 3) the build was terminated

The content of the dynamically generated property files is not pickup by current 
build process which means that it will eventually fail due to the missing 
information if allowed to continue. This necessitates the eager build termination
in step 3, forcing the user the start a new MSBuild process which will properly load
the newly generated property files.

If this file exists then the conan packages are expected to be installed and
the required property files are expected to exists. Hence 'conan' is *not* 
invoked and the MSBuild process is expected to build successfully.

!!!Remove this file to force a conan package dependency installation!!!
"  />
    <!-- step 3: terminate the build -->
    <PropertyGroup>
      <ErrorText>This project referenced conan package(s) that were missing on this computer
but which are now installed. A new build is required to start using them.
      </ErrorText>
    </PropertyGroup>
    <Error Text="$(ErrorText)" />
  </Target>

  <Target Name="ConanImports" AfterTargets="Build" 
    Condition="Exists('conan_imports_manifest.txt')" >
    <!--  assuming that the conan imported to ./conan-libs/ !!!
    Then these files are again copied to the output directory of the project -->

    <Message Text="copy the conan imported files to the 'OutDir': $(OutDir)" Importance="high" />
    <ItemGroup>
        <MySourceFiles Include="conan-libs\*"/>  
    </ItemGroup>
    <Copy SourceFiles="@(MySourceFiles)"
          DestinationFiles="@(MySourceFiles->'$(OutDir)%(Filename)%(extension)')" />
  </Target>

</Project>